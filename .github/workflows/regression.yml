name: Regression

on: workflow_dispatch

jobs:
  cypress-run:
    runs-on: ubuntu-latest
    env:
      COOKIE_SECRET: someSuperSecretStringThatYouWouldNeverGuess
      GOOGLE_ANALYTICS_PROPERTY_ID: ga-test
      PGUSER: water
      PGHOST: localhost
      PGPASSWORD: water
      PGPORT: 5432
      PGDATABASE: water
      ENVIRONMENT: test
      DATABASE_URL: postgres://water:water@localhost:5432/water
      JWT_SECRET: i1ESOW3eC0Knwx1RXejhvpWtVL4RAOBmf0WkztZa
      JWT_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6InRlc3QiLCJpYXQiOjE1MDMzMTg0NDV9.uBPV2bd6MoKlLA7pZskL0rqoUzL6_G7ZheEWEYxYcwQ
      NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TEST_NOTIFY_KEY: ${{ secrets.TEST_NOTIFY_KEY }}
      WHITELIST_NOTIFY_KEY: ${{ secrets.WHITELIST_NOTIFY_KEY }}
      NOTIFY_CALLBACK_TOKEN: some-token
      LIVE_NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TRAVIS: 1
      TEST_MODE: 1
      NODE_ENV: local
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      WATER_URI: http://127.0.0.1:8001/water/1.0
      WATER_URI_INTERNAL: http://127.0.0.1:8001/water/1.0
      PERMIT_URI: http://127.0.0.1:8004/API/1.0/
      ADMIN_URI: http://127.0.0.1:8005/API/1.0/
      CRM_URI: http://127.0.0.1:8002/crm/1.0
      IDM_URI: http://127.0.0.1:8003/idm/1.0
      RETURNS_URI: http://127.0.0.1:8006/returns/1.0
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: water
          POSTGRES_HOST: localhost
          POSTGRES_PASSWORD: water
          POSTGRES_PORT: 5432
          POSTGRES_DB: water
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started. You must have this so the runner knows to wait till
        # postgres is up and running before proceeding
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379
      
    steps:
      - name: Checkout
        uses: actions/checkout@v2
          
      - name: Create database
        run: |
          PGPASSWORD=water psql -U water -tc "SELECT 'CREATE DATABASE water' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'water')"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS idm"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS crm"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS crm_v2"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS import"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS permit"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS returns"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS water"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS water_import"
          
      - name: Install water service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-service
          path: './water-abstraction-service'

      - name: Install water service dependencies
        run: |
          cd ./water-abstraction-service
          npm i
          npm run migrate
          
      - name: Install CRM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-crm
          path: './water-abstraction-tactical-crm'

      - name: Install CRM dependencies
        run: |
          cd ./water-abstraction-tactical-crm
          npm i
          npm run migrate
          
      - name: Install IDM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-idm
          path: './water-abstraction-tactical-idm'

      - name: Install IDM dependencies
        run: |
          cd ./water-abstraction-tactical-idm
          npm i
          npm run migrate
          
      - name: Install permit repo
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-permit-repository
          path: './water-abstraction-permit-repository'

      - name: Install permit repo dependencies
        run: |
          cd ./water-abstraction-permit-repository
          npm i
          npm run migrate
          
      - name: Install import repo
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-import
          path: './water-abstraction-import'

      - name: Install import repo dependencies
        run: |
          cd ./water-abstraction-import
          npm i
          npm run migrate
      
      - name: Install returns service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-returns
          path: './water-abstraction-returns'

      - name: Install returns service dependencies
        run: |
          cd ./water-abstraction-returns
          npm i
          npm run migrate
          
      - name: Start pm2
        run: |
          PGPASSWORD=water psql -U water -tc "SELECT schemaname, tablename FROM pg_catalog.pg_tables pt"
          npm i -g pm2
          cd water-abstraction-permit-repository && pm2 start ecosystem.config.json --update-env && cd ..
          cd water-abstraction-service && pm2 start ecosystem.config.json --update-env && cd ..
          cd water-abstraction-tactical-crm && pm2 start ecosystem.config.json --update-env && cd ..
          cd water-abstraction-tactical-idm && pm2 start ecosystem.config.json --update-env && cd ..
          cd water-abstraction-import && pm2 start ecosystem.config.json --update-env && cd ..
          cd water-abstraction-returns && pm2 start ecosystem.config.json --update-env && cd ..
          npm i
          pm2 start ecosystem.config.json
          curl --location --request GET 'http://127.0.0.1:8001/status'
          curl --location --request GET 'http://127.0.0.1:8002/status'
          curl --location --request GET 'http://127.0.0.1:8003/status'
          curl --location --request GET 'http://127.0.0.1:8004/status'
          curl --location --request GET 'http://127.0.0.1:8002/status'
          curl --location --request GET 'http://127.0.0.1:8006/status'
          curl --location --request GET 'http://127.0.0.1:8007/status'
          curl --location --request GET 'http://127.0.0.1:8008/status'
          curl --location --request GET 'http://localhost:8001/water/1.0/service-status'
          npm run test:cypress-silently
          npm run test:cypress-prepare-report
        
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: PM2-Logs
          path: ~/.pm2/logs/
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Cypress Report
          path: ./cypress/reports/mocha/ ./cypress/reports/mocha/combined-report.json",
      
