name: Regression

on: workflow_dispatch

jobs:
  RegressionTests:
    runs-on: ubuntu-latest
    env:
      COOKIE_SECRET: somethingverysecrethere
      GOOGLE_ANALYTICS_PROPERTY_ID: ga-test
      PGUSER: water
      PGHOST: localhost
      PGPASSWORD: water
      PGPORT: 5432
      PGDATABASE: water
      ENVIRONMENT: dev
      DATABASE_URL: postgres://water:water@localhost:5432/water
      JWT_SECRET: secret
      JWT_TOKEN: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNH0.MOREC6-Kszb9bDFw0O1UKywpnkcP-c5cPjASMpjk8Po
      NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TEST_NOTIFY_KEY: ${{ secrets.TEST_NOTIFY_KEY }}
      WHITELIST_NOTIFY_KEY: ${{ secrets.WHITELIST_NOTIFY_KEY }}
      LIVE_NOTIFY_KEY: somerealnotifykey-00000000-0000-0000-0000-000000000000-00000000-0000-0000-0000-000000000000
      TRAVIS: 1
      NODE_ENV: local
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
      WATER_URI: http://127.0.0.1:8001/water/1.0
      WATER_URI_INTERNAL: http://127.0.0.1:8001/water/1.0
      PERMIT_URI: http://127.0.0.1:8004/API/1.0/
      ADMIN_URI: http://127.0.0.1:8005/API/1.0/
      CRM_URI: http://127.0.0.1:8002/crm/1.0
      RETURNS_URI: http://127.0.0.1:8006/returns/1.0
      REDIS_HOST: redis
      REDIS_PORT: 6379

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:13-alpine
        # Provide the password for postgres
        env:
          POSTGRES_USER: water
          POSTGRES_HOST: localhost
          POSTGRES_PASSWORD: water
          POSTGRES_PORT: 5432
          POSTGRES_DB: water
        # Maps tcp port 5432 on service container to the host
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started. You must have this so the runner knows to wait till
        # postgres is up and running before proceeding
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        # Docker Hub image
        image: redis
        ports:
          # Maps port 6379 on service container to the host
          - 6379:6379

    steps:
      - name: Install Node
        uses: actions/setup-node@v2-beta
        with:
          node-version: '12'


      # Downloads a copy of the code in your repository before running CI tests
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create database
        run: |
          PGPASSWORD=water psql -U water -tc "SELECT 'CREATE DATABASE water' WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = 'water')"
          PGPASSWORD=water psql -U water -tc "CREATE SCHEMA IF NOT EXISTS water AUTHORIZATION water;"


      - name: Install water service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-service
          path: './water-abstraction-service'

      - name: Install water service dependencies
        run: |
          cd ./water-abstraction-service
          npm i
          npm run migrate

      - name: Install CRM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-crm
          path: './water-abstraction-tactical-crm'

      - name: Install CRM dependencies
        run: |
          cd ./water-abstraction-tactical-crm
          npm i
          npm run migrate

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install UI dependencies
        run: |
          npm i


      - name: Install IDM
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-tactical-idm
          path: './water-abstraction-tactical-idm'

      - name: Install IDM dependencies
        run: |
          cd ./water-abstraction-tactical-idm
          npm i
          npm run migrate

      - name: Install returns service
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-returns
          path: './water-abstraction-returns'

      - name: Install returns service dependencies
        run: |
          cd ./water-abstraction-returns
          npm i
          npm run migrate

      - name: Install permit repo
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-permit-repository
          path: './water-abstraction-permit-repository'

      - name: Install permit repo dependencies
        run: |
          cd ./water-abstraction-permit-repository
          npm i
          npm run migrate


      - name: Install import repo
        uses: actions/checkout@v2
        with:
          repository: defra/water-abstraction-import
          path: './water-abstraction-import'

      - name: Install permit repo dependencies
        run: |
          cd ./water-abstraction-import
          npm i
          npm run migrate

      # Speeds up workflows by reading the node modules from cache. Obviously you need to run it at least once, and the
      # cache will be updated should the package-lock.json file change
      - name: Cache Node modules
        uses: actions/cache@v2
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.OS }}-node-
            ${{ runner.OS }}-

      - name: Install PM2
        run: |
          npm i -g pm2
          
      - name: Start pm2
        run: |
          cd water-abstraction-permit-repository && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-service && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-tactical-crm && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-tactical-idm && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-returns && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-import && pm2 start ecosystem.config.json && cd ..
          cd water-abstraction-ui && pm2 start ecosystem.config.json && cd ..
          pm2 start ecosystem.config.json --env production

      - name: Sleep for 10 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '10s'
          
      - name: Run cypress e2e tests
        uses: cypress-io/github-action@v2
        with:
          start: npm run test:cypress-silently
          browser: chrome
          headless: true
          wait-on: 'http://localhost:8008'
