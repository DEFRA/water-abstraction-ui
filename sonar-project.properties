# Reference for all available properties
# https://sonarcloud.io/documentation/analysis/analysis-parameters/
# Reference for how to glob files
# https://docs.sonarqube.org/latest/project-administration/narrowing-the-focus/

# Project key is required. You'll find it in the SonarCloud UI
sonar.projectKey=DEFRA_water-abstraction-ui
sonar.organization=defra

# This is the name and version displayed in the SonarCloud UI.
sonar.projectName=water-abstraction-ui

# This will add the same links in the SonarCloud UI
sonar.links.homepage=https://github.com/DEFRA/water-abstraction-ui
sonar.links.ci=https://github.com/DEFRA/water-abstraction-ui/actions
sonar.links.scm=https://github.com/DEFRA/water-abstraction-ui
sonar.links.issue=https://github.com/DEFRA/water-abstraction-team/issues

# Path is relative to the sonar-project.properties file.
# SonarCloud seems to have little intelligence when it comes to code coverage. Quite simply if it sees a code file, it
# checks it against our coverage report and if not found flags it as uncovered. This also effects the overall coverage
# score. In our case this means SonarCloud could flag everything under test/ as lacking code coverage!
# We have found this combinations of `sources`, `tests` and `tests.inclusions` means SonarCloud properly understands
# what is code and what is a test file. Note the use of ./ in `sources`. This is the only way we found to include root
# level files and ensure they are correctly resolved when SonarCloud scans the lcov coverage data.
sonar.sources=src,./config.js,./server-common.js,./server-external.js,./server-internal.js
sonar.tests=test
sonar.test.inclusions=test/**/*.js

# Encoding of the source code. Default is default system encoding
sonar.sourceEncoding=UTF-8

# Ensure SonarCloud knows where to pick up test coverage stats
sonar.javascript.lcov.reportPaths=coverage/lcov.info
